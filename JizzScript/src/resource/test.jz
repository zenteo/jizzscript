// math package

pack math {
	// A constant is also a variable
	PI = 3.14159264358979323846

	/*
	* A vector is, and will always be, a vector.
	*/
	func Vector2 {
		// x = $, where the next parameter is $
		// y = $, where the next parameter is $
		$x
		$y
		create = @Vector2
		
		func add {
			$v
			x += v.x
			y += v.y
			return super
		}
		
		func added {
			return clone.add $
		}
		
		func sub {
			$v
			x -= v.x
			y -= v.y
			return super
		}
		
		func subed {
			return clone.sub $
		}
		
		func mul {
			$f
			x *= f
			y *= f
			return super
		}
		
		func muled {
			return clone.mul $
		}
		
		func div {
			$f
			x /= f
			y /= f
			return super
		}

		func dived {
			return clone.div $
		}
		
		func equals {
			$v
			return x == v.x && y == v.y
		}
		
		func squaredLength {
			return x*x + y*y
		}
		
		func length {
			return sqrt squaredLength
		}
		
		func dot {
			$v
			return x*v.x + y*v.y
		}
		
		func normalize {
			l = length
			x /= l
			y /= l
			return super
		}
		
		func normalized {
			return clone.normalize
		}
		
		func clone {
			return create x y
		}
		
		func identity {
			return interfaceOf super
		}
		
		func toString {
			return "[" + x + ", " + y + "]"
		}
	}

}

// test package
pack test {
	a = math.Vector2 3 5
	b = a.create 2 1
}

pack test {
	jizz.println (a.added b).toString
	jizz.println (a.added b).toString
	
	jizz.println "-----"
	
	jizz.println (a.add b).toString
	jizz.println (a.add b).toString
	
	jizz.println "-----"
	
	jizz.println (a.normalized).toString
	jizz.println (math.cos 23)
	jizz.println a.identity
}

<<<<<<< HEAD

jizz.println math.sqrt 3.5
i = 0
while i < 100 { // 1 000 000
	if i >= 50 {
		jizz.println "heahe" + i
	}
	i++
}
=======
>>>>>>> branch 'master' of https://github.com/zenteo/jizzscript.git
jizz.println "Done"
